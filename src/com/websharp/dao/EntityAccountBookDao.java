package com.websharp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.websharp.dao.EntityAccountBook;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_ACCOUNT_BOOK.
*/
public class EntityAccountBookDao extends AbstractDao<EntityAccountBook, Void> {

    public static final String TABLENAME = "ENTITY_ACCOUNT_BOOK";

    /**
     * Properties of entity EntityAccountBook.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property AcctBalanceId = new Property(0, String.class, "acctBalanceId", false, "ACCT_BALANCE_ID");
        public final static Property BalanceTypeId = new Property(1, String.class, "balanceTypeId", false, "BALANCE_TYPE_ID");
        public final static Property BalanceTypeName = new Property(2, String.class, "balanceTypeName", false, "BALANCE_TYPE_NAME");
        public final static Property Balance = new Property(3, String.class, "balance", false, "BALANCE");
        public final static Property EffDate = new Property(4, String.class, "effDate", false, "EFF_DATE");
        public final static Property ExpDate = new Property(5, String.class, "expDate", false, "EXP_DATE");
        public final static Property AccountInfo_Id = new Property(6, String.class, "accountInfo_Id", false, "ACCOUNT_INFO__ID");
    };


    public EntityAccountBookDao(DaoConfig config) {
        super(config);
    }
    
    public EntityAccountBookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_ACCOUNT_BOOK' (" + //
                "'ACCT_BALANCE_ID' TEXT," + // 0: acctBalanceId
                "'BALANCE_TYPE_ID' TEXT," + // 1: balanceTypeId
                "'BALANCE_TYPE_NAME' TEXT," + // 2: balanceTypeName
                "'BALANCE' TEXT," + // 3: balance
                "'EFF_DATE' TEXT," + // 4: effDate
                "'EXP_DATE' TEXT," + // 5: expDate
                "'ACCOUNT_INFO__ID' TEXT);"); // 6: accountInfo_Id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_ACCOUNT_BOOK'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityAccountBook entity) {
        stmt.clearBindings();
 
        String acctBalanceId = entity.getAcctBalanceId();
        if (acctBalanceId != null) {
            stmt.bindString(1, acctBalanceId);
        }
 
        String balanceTypeId = entity.getBalanceTypeId();
        if (balanceTypeId != null) {
            stmt.bindString(2, balanceTypeId);
        }
 
        String balanceTypeName = entity.getBalanceTypeName();
        if (balanceTypeName != null) {
            stmt.bindString(3, balanceTypeName);
        }
 
        String balance = entity.getBalance();
        if (balance != null) {
            stmt.bindString(4, balance);
        }
 
        String effDate = entity.getEffDate();
        if (effDate != null) {
            stmt.bindString(5, effDate);
        }
 
        String expDate = entity.getExpDate();
        if (expDate != null) {
            stmt.bindString(6, expDate);
        }
 
        String accountInfo_Id = entity.getAccountInfo_Id();
        if (accountInfo_Id != null) {
            stmt.bindString(7, accountInfo_Id);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntityAccountBook readEntity(Cursor cursor, int offset) {
        EntityAccountBook entity = new EntityAccountBook( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // acctBalanceId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // balanceTypeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // balanceTypeName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // balance
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // effDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // expDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // accountInfo_Id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityAccountBook entity, int offset) {
        entity.setAcctBalanceId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBalanceTypeId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBalanceTypeName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBalance(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEffDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setExpDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAccountInfo_Id(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntityAccountBook entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntityAccountBook entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
