package com.websharp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.websharp.dao.EntityBillRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_BILL_RECORD.
*/
public class EntityBillRecordDao extends AbstractDao<EntityBillRecord, Void> {

    public static final String TABLENAME = "ENTITY_BILL_RECORD";

    /**
     * Properties of entity EntityBillRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ACCT_ITEM_TYPE = new Property(0, String.class, "ACCT_ITEM_TYPE", false, "ACCT__ITEM__TYPE");
        public final static Property TOTAL_AMOUNT = new Property(1, String.class, "TOTAL_AMOUNT", false, "TOTAL__AMOUNT");
        public final static Property BILLING_CYCLE_ID = new Property(2, String.class, "BILLING_CYCLE_ID", false, "BILLING__CYCLE__ID");
        public final static Property UNPAY_AMOUNT = new Property(3, String.class, "UNPAY_AMOUNT", false, "UNPAY__AMOUNT");
        public final static Property PPY_AMOUNT = new Property(4, String.class, "PPY_AMOUNT", false, "PPY__AMOUNT");
    };


    public EntityBillRecordDao(DaoConfig config) {
        super(config);
    }
    
    public EntityBillRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_BILL_RECORD' (" + //
                "'ACCT__ITEM__TYPE' TEXT," + // 0: ACCT_ITEM_TYPE
                "'TOTAL__AMOUNT' TEXT," + // 1: TOTAL_AMOUNT
                "'BILLING__CYCLE__ID' TEXT," + // 2: BILLING_CYCLE_ID
                "'UNPAY__AMOUNT' TEXT," + // 3: UNPAY_AMOUNT
                "'PPY__AMOUNT' TEXT);"); // 4: PPY_AMOUNT
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_BILL_RECORD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityBillRecord entity) {
        stmt.clearBindings();
 
        String ACCT_ITEM_TYPE = entity.getACCT_ITEM_TYPE();
        if (ACCT_ITEM_TYPE != null) {
            stmt.bindString(1, ACCT_ITEM_TYPE);
        }
 
        String TOTAL_AMOUNT = entity.getTOTAL_AMOUNT();
        if (TOTAL_AMOUNT != null) {
            stmt.bindString(2, TOTAL_AMOUNT);
        }
 
        String BILLING_CYCLE_ID = entity.getBILLING_CYCLE_ID();
        if (BILLING_CYCLE_ID != null) {
            stmt.bindString(3, BILLING_CYCLE_ID);
        }
 
        String UNPAY_AMOUNT = entity.getUNPAY_AMOUNT();
        if (UNPAY_AMOUNT != null) {
            stmt.bindString(4, UNPAY_AMOUNT);
        }
 
        String PPY_AMOUNT = entity.getPPY_AMOUNT();
        if (PPY_AMOUNT != null) {
            stmt.bindString(5, PPY_AMOUNT);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntityBillRecord readEntity(Cursor cursor, int offset) {
        EntityBillRecord entity = new EntityBillRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ACCT_ITEM_TYPE
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // TOTAL_AMOUNT
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // BILLING_CYCLE_ID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // UNPAY_AMOUNT
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // PPY_AMOUNT
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityBillRecord entity, int offset) {
        entity.setACCT_ITEM_TYPE(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTOTAL_AMOUNT(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBILLING_CYCLE_ID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUNPAY_AMOUNT(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPPY_AMOUNT(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntityBillRecord entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntityBillRecord entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
