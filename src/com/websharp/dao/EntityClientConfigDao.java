package com.websharp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.websharp.dao.EntityClientConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_CLIENT_CONFIG.
*/
public class EntityClientConfigDao extends AbstractDao<EntityClientConfig, Void> {

    public static final String TABLENAME = "ENTITY_CLIENT_CONFIG";

    /**
     * Properties of entity EntityClientConfig.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ParamTypeCode = new Property(0, String.class, "ParamTypeCode", false, "PARAM_TYPE_CODE");
        public final static Property ParamTypeName = new Property(1, String.class, "ParamTypeName", false, "PARAM_TYPE_NAME");
        public final static Property ParamTypeID = new Property(2, String.class, "ParamTypeID", false, "PARAM_TYPE_ID");
        public final static Property ParamName = new Property(3, String.class, "ParamName", false, "PARAM_NAME");
        public final static Property ParamValue = new Property(4, String.class, "ParamValue", false, "PARAM_VALUE");
        public final static Property Description = new Property(5, String.class, "Description", false, "DESCRIPTION");
        public final static Property CreateTime = new Property(6, String.class, "CreateTime", false, "CREATE_TIME");
        public final static Property Creator = new Property(7, String.class, "Creator", false, "CREATOR");
        public final static Property CreateIP = new Property(8, String.class, "CreateIP", false, "CREATE_IP");
        public final static Property UpdateTime = new Property(9, String.class, "UpdateTime", false, "UPDATE_TIME");
        public final static Property Updater = new Property(10, String.class, "Updater", false, "UPDATER");
        public final static Property UpdateIP = new Property(11, String.class, "UpdateIP", false, "UPDATE_IP");
        public final static Property ID = new Property(12, Integer.class, "ID", false, "ID");
    };


    public EntityClientConfigDao(DaoConfig config) {
        super(config);
    }
    
    public EntityClientConfigDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_CLIENT_CONFIG' (" + //
                "'PARAM_TYPE_CODE' TEXT," + // 0: ParamTypeCode
                "'PARAM_TYPE_NAME' TEXT," + // 1: ParamTypeName
                "'PARAM_TYPE_ID' TEXT," + // 2: ParamTypeID
                "'PARAM_NAME' TEXT," + // 3: ParamName
                "'PARAM_VALUE' TEXT," + // 4: ParamValue
                "'DESCRIPTION' TEXT," + // 5: Description
                "'CREATE_TIME' TEXT," + // 6: CreateTime
                "'CREATOR' TEXT," + // 7: Creator
                "'CREATE_IP' TEXT," + // 8: CreateIP
                "'UPDATE_TIME' TEXT," + // 9: UpdateTime
                "'UPDATER' TEXT," + // 10: Updater
                "'UPDATE_IP' TEXT," + // 11: UpdateIP
                "'ID' INTEGER);"); // 12: ID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_CLIENT_CONFIG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityClientConfig entity) {
        stmt.clearBindings();
 
        String ParamTypeCode = entity.getParamTypeCode();
        if (ParamTypeCode != null) {
            stmt.bindString(1, ParamTypeCode);
        }
 
        String ParamTypeName = entity.getParamTypeName();
        if (ParamTypeName != null) {
            stmt.bindString(2, ParamTypeName);
        }
 
        String ParamTypeID = entity.getParamTypeID();
        if (ParamTypeID != null) {
            stmt.bindString(3, ParamTypeID);
        }
 
        String ParamName = entity.getParamName();
        if (ParamName != null) {
            stmt.bindString(4, ParamName);
        }
 
        String ParamValue = entity.getParamValue();
        if (ParamValue != null) {
            stmt.bindString(5, ParamValue);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(6, Description);
        }
 
        String CreateTime = entity.getCreateTime();
        if (CreateTime != null) {
            stmt.bindString(7, CreateTime);
        }
 
        String Creator = entity.getCreator();
        if (Creator != null) {
            stmt.bindString(8, Creator);
        }
 
        String CreateIP = entity.getCreateIP();
        if (CreateIP != null) {
            stmt.bindString(9, CreateIP);
        }
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(10, UpdateTime);
        }
 
        String Updater = entity.getUpdater();
        if (Updater != null) {
            stmt.bindString(11, Updater);
        }
 
        String UpdateIP = entity.getUpdateIP();
        if (UpdateIP != null) {
            stmt.bindString(12, UpdateIP);
        }
 
        Integer ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(13, ID);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntityClientConfig readEntity(Cursor cursor, int offset) {
        EntityClientConfig entity = new EntityClientConfig( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ParamTypeCode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ParamTypeName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ParamTypeID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ParamName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ParamValue
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Description
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CreateTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Creator
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // CreateIP
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // UpdateTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Updater
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // UpdateIP
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12) // ID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityClientConfig entity, int offset) {
        entity.setParamTypeCode(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setParamTypeName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setParamTypeID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setParamName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setParamValue(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreateTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreator(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreateIP(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUpdateTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUpdater(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUpdateIP(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setID(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntityClientConfig entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntityClientConfig entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
