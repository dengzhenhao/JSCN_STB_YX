package com.websharp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.websharp.dao.EntityCommand;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_COMMAND.
*/
public class EntityCommandDao extends AbstractDao<EntityCommand, Void> {

    public static final String TABLENAME = "ENTITY_COMMAND";

    /**
     * Properties of entity EntityCommand.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property BUSI_COMMAND_NAME = new Property(0, String.class, "BUSI_COMMAND_NAME", false, "BUSI__COMMAND__NAME");
        public final static Property AUTH_OBJECT_NO = new Property(1, String.class, "AUTH_OBJECT_NO", false, "AUTH__OBJECT__NO");
        public final static Property NE_COMMAND_NAME = new Property(2, String.class, "NE_COMMAND_NAME", false, "NE__COMMAND__NAME");
        public final static Property CREATE_DATE = new Property(3, String.class, "CREATE_DATE", false, "CREATE__DATE");
        public final static Property DEAL_STATE = new Property(4, String.class, "DEAL_STATE", false, "DEAL__STATE");
        public final static Property CMD_STATE = new Property(5, String.class, "CMD_STATE", false, "CMD__STATE");
        public final static Property CMD_CONFIRM_DATE = new Property(6, String.class, "CMD_CONFIRM_DATE", false, "CMD__CONFIRM__DATE");
        public final static Property CMD_STATUS_INFO = new Property(7, String.class, "CMD_STATUS_INFO", false, "CMD__STATUS__INFO");
        public final static Property ORGANIZE_NAME = new Property(8, String.class, "ORGANIZE_NAME", false, "ORGANIZE__NAME");
        public final static Property STAFF_NAME = new Property(9, String.class, "STAFF_NAME", false, "STAFF__NAME");
    };


    public EntityCommandDao(DaoConfig config) {
        super(config);
    }
    
    public EntityCommandDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_COMMAND' (" + //
                "'BUSI__COMMAND__NAME' TEXT," + // 0: BUSI_COMMAND_NAME
                "'AUTH__OBJECT__NO' TEXT," + // 1: AUTH_OBJECT_NO
                "'NE__COMMAND__NAME' TEXT," + // 2: NE_COMMAND_NAME
                "'CREATE__DATE' TEXT," + // 3: CREATE_DATE
                "'DEAL__STATE' TEXT," + // 4: DEAL_STATE
                "'CMD__STATE' TEXT," + // 5: CMD_STATE
                "'CMD__CONFIRM__DATE' TEXT," + // 6: CMD_CONFIRM_DATE
                "'CMD__STATUS__INFO' TEXT," + // 7: CMD_STATUS_INFO
                "'ORGANIZE__NAME' TEXT," + // 8: ORGANIZE_NAME
                "'STAFF__NAME' TEXT);"); // 9: STAFF_NAME
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_COMMAND'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityCommand entity) {
        stmt.clearBindings();
 
        String BUSI_COMMAND_NAME = entity.getBUSI_COMMAND_NAME();
        if (BUSI_COMMAND_NAME != null) {
            stmt.bindString(1, BUSI_COMMAND_NAME);
        }
 
        String AUTH_OBJECT_NO = entity.getAUTH_OBJECT_NO();
        if (AUTH_OBJECT_NO != null) {
            stmt.bindString(2, AUTH_OBJECT_NO);
        }
 
        String NE_COMMAND_NAME = entity.getNE_COMMAND_NAME();
        if (NE_COMMAND_NAME != null) {
            stmt.bindString(3, NE_COMMAND_NAME);
        }
 
        String CREATE_DATE = entity.getCREATE_DATE();
        if (CREATE_DATE != null) {
            stmt.bindString(4, CREATE_DATE);
        }
 
        String DEAL_STATE = entity.getDEAL_STATE();
        if (DEAL_STATE != null) {
            stmt.bindString(5, DEAL_STATE);
        }
 
        String CMD_STATE = entity.getCMD_STATE();
        if (CMD_STATE != null) {
            stmt.bindString(6, CMD_STATE);
        }
 
        String CMD_CONFIRM_DATE = entity.getCMD_CONFIRM_DATE();
        if (CMD_CONFIRM_DATE != null) {
            stmt.bindString(7, CMD_CONFIRM_DATE);
        }
 
        String CMD_STATUS_INFO = entity.getCMD_STATUS_INFO();
        if (CMD_STATUS_INFO != null) {
            stmt.bindString(8, CMD_STATUS_INFO);
        }
 
        String ORGANIZE_NAME = entity.getORGANIZE_NAME();
        if (ORGANIZE_NAME != null) {
            stmt.bindString(9, ORGANIZE_NAME);
        }
 
        String STAFF_NAME = entity.getSTAFF_NAME();
        if (STAFF_NAME != null) {
            stmt.bindString(10, STAFF_NAME);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntityCommand readEntity(Cursor cursor, int offset) {
        EntityCommand entity = new EntityCommand( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // BUSI_COMMAND_NAME
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // AUTH_OBJECT_NO
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // NE_COMMAND_NAME
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CREATE_DATE
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // DEAL_STATE
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // CMD_STATE
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CMD_CONFIRM_DATE
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // CMD_STATUS_INFO
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ORGANIZE_NAME
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // STAFF_NAME
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityCommand entity, int offset) {
        entity.setBUSI_COMMAND_NAME(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAUTH_OBJECT_NO(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNE_COMMAND_NAME(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCREATE_DATE(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDEAL_STATE(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCMD_STATE(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCMD_CONFIRM_DATE(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCMD_STATUS_INFO(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setORGANIZE_NAME(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSTAFF_NAME(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntityCommand entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntityCommand entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
