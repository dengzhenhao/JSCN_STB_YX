package com.websharp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.websharp.dao.EntityCustomer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_CUSTOMER.
*/
public class EntityCustomerDao extends AbstractDao<EntityCustomer, Void> {

    public static final String TABLENAME = "ENTITY_CUSTOMER";

    /**
     * Properties of entity EntityCustomer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CUST_ID = new Property(0, String.class, "CUST_ID", false, "CUST__ID");
        public final static Property CUST_NAME = new Property(1, String.class, "CUST_NAME", false, "CUST__NAME");
        public final static Property CREATE_DATE = new Property(2, String.class, "CREATE_DATE", false, "CREATE__DATE");
        public final static Property CUST_PROP = new Property(3, String.class, "CUST_PROP", false, "CUST__PROP");
        public final static Property CUST_CERT_TYPE = new Property(4, String.class, "CUST_CERT_TYPE", false, "CUST__CERT__TYPE");
        public final static Property CUST_STATUS = new Property(5, String.class, "CUST_STATUS", false, "CUST__STATUS");
        public final static Property CUST_TYPE = new Property(6, String.class, "CUST_TYPE", false, "CUST__TYPE");
        public final static Property CUST_LEVEL = new Property(7, String.class, "CUST_LEVEL", false, "CUST__LEVEL");
        public final static Property REGION_NAME1 = new Property(8, String.class, "REGION_NAME1", false, "REGION__NAME1");
        public final static Property REGION_NAME2 = new Property(9, String.class, "REGION_NAME2", false, "REGION__NAME2");
        public final static Property REGION_NAME3 = new Property(10, String.class, "REGION_NAME3", false, "REGION__NAME3");
        public final static Property LOUDONG = new Property(11, String.class, "LOUDONG", false, "LOUDONG");
        public final static Property DOOR_DESC = new Property(12, String.class, "DOOR_DESC", false, "DOOR__DESC");
        public final static Property CONTRACT_TYPE = new Property(13, String.class, "CONTRACT_TYPE", false, "CONTRACT__TYPE");
        public final static Property ORGANIZE_NAME = new Property(14, String.class, "ORGANIZE_NAME", false, "ORGANIZE__NAME");
        public final static Property STAFF_NAME = new Property(15, String.class, "STAFF_NAME", false, "STAFF__NAME");
        public final static Property CUST_CODE = new Property(16, String.class, "CUST_CODE", false, "CUST__CODE");
        public final static Property CONT_NAME = new Property(17, String.class, "CONT_NAME", false, "CONT__NAME");
        public final static Property OWN_CORP_ORG = new Property(18, String.class, "OWN_CORP_ORG", false, "OWN__CORP__ORG");
        public final static Property CONT_PHONE1 = new Property(19, String.class, "CONT_PHONE1", false, "CONT__PHONE1");
        public final static Property CONT_PHONE2 = new Property(20, String.class, "CONT_PHONE2", false, "CONT__PHONE2");
        public final static Property CUST_CERT_NO = new Property(21, String.class, "CUST_CERT_NO", false, "CUST__CERT__NO");
        public final static Property CONT_MOBILE1 = new Property(22, String.class, "CONT_MOBILE1", false, "CONT__MOBILE1");
        public final static Property CONT_MOBILE2 = new Property(23, String.class, "CONT_MOBILE2", false, "CONT__MOBILE2");
        public final static Property REMARK = new Property(24, String.class, "REMARK", false, "REMARK");
        public final static Property ACCT_ID = new Property(25, String.class, "ACCT_ID", false, "ACCT__ID");
        public final static Property PAYMENT_METHOD = new Property(26, String.class, "PAYMENT_METHOD", false, "PAYMENT__METHOD");
        public final static Property C = new Property(27, String.class, "C", false, "C");
        public final static Property STD_ADDR_NAME = new Property(28, String.class, "STD_ADDR_NAME", false, "STD__ADDR__NAME");
    };


    public EntityCustomerDao(DaoConfig config) {
        super(config);
    }
    
    public EntityCustomerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_CUSTOMER' (" + //
                "'CUST__ID' TEXT," + // 0: CUST_ID
                "'CUST__NAME' TEXT," + // 1: CUST_NAME
                "'CREATE__DATE' TEXT," + // 2: CREATE_DATE
                "'CUST__PROP' TEXT," + // 3: CUST_PROP
                "'CUST__CERT__TYPE' TEXT," + // 4: CUST_CERT_TYPE
                "'CUST__STATUS' TEXT," + // 5: CUST_STATUS
                "'CUST__TYPE' TEXT," + // 6: CUST_TYPE
                "'CUST__LEVEL' TEXT," + // 7: CUST_LEVEL
                "'REGION__NAME1' TEXT," + // 8: REGION_NAME1
                "'REGION__NAME2' TEXT," + // 9: REGION_NAME2
                "'REGION__NAME3' TEXT," + // 10: REGION_NAME3
                "'LOUDONG' TEXT," + // 11: LOUDONG
                "'DOOR__DESC' TEXT," + // 12: DOOR_DESC
                "'CONTRACT__TYPE' TEXT," + // 13: CONTRACT_TYPE
                "'ORGANIZE__NAME' TEXT," + // 14: ORGANIZE_NAME
                "'STAFF__NAME' TEXT," + // 15: STAFF_NAME
                "'CUST__CODE' TEXT," + // 16: CUST_CODE
                "'CONT__NAME' TEXT," + // 17: CONT_NAME
                "'OWN__CORP__ORG' TEXT," + // 18: OWN_CORP_ORG
                "'CONT__PHONE1' TEXT," + // 19: CONT_PHONE1
                "'CONT__PHONE2' TEXT," + // 20: CONT_PHONE2
                "'CUST__CERT__NO' TEXT," + // 21: CUST_CERT_NO
                "'CONT__MOBILE1' TEXT," + // 22: CONT_MOBILE1
                "'CONT__MOBILE2' TEXT," + // 23: CONT_MOBILE2
                "'REMARK' TEXT," + // 24: REMARK
                "'ACCT__ID' TEXT," + // 25: ACCT_ID
                "'PAYMENT__METHOD' TEXT," + // 26: PAYMENT_METHOD
                "'C' TEXT," + // 27: C
                "'STD__ADDR__NAME' TEXT);"); // 28: STD_ADDR_NAME
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_CUSTOMER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityCustomer entity) {
        stmt.clearBindings();
 
        String CUST_ID = entity.getCUST_ID();
        if (CUST_ID != null) {
            stmt.bindString(1, CUST_ID);
        }
 
        String CUST_NAME = entity.getCUST_NAME();
        if (CUST_NAME != null) {
            stmt.bindString(2, CUST_NAME);
        }
 
        String CREATE_DATE = entity.getCREATE_DATE();
        if (CREATE_DATE != null) {
            stmt.bindString(3, CREATE_DATE);
        }
 
        String CUST_PROP = entity.getCUST_PROP();
        if (CUST_PROP != null) {
            stmt.bindString(4, CUST_PROP);
        }
 
        String CUST_CERT_TYPE = entity.getCUST_CERT_TYPE();
        if (CUST_CERT_TYPE != null) {
            stmt.bindString(5, CUST_CERT_TYPE);
        }
 
        String CUST_STATUS = entity.getCUST_STATUS();
        if (CUST_STATUS != null) {
            stmt.bindString(6, CUST_STATUS);
        }
 
        String CUST_TYPE = entity.getCUST_TYPE();
        if (CUST_TYPE != null) {
            stmt.bindString(7, CUST_TYPE);
        }
 
        String CUST_LEVEL = entity.getCUST_LEVEL();
        if (CUST_LEVEL != null) {
            stmt.bindString(8, CUST_LEVEL);
        }
 
        String REGION_NAME1 = entity.getREGION_NAME1();
        if (REGION_NAME1 != null) {
            stmt.bindString(9, REGION_NAME1);
        }
 
        String REGION_NAME2 = entity.getREGION_NAME2();
        if (REGION_NAME2 != null) {
            stmt.bindString(10, REGION_NAME2);
        }
 
        String REGION_NAME3 = entity.getREGION_NAME3();
        if (REGION_NAME3 != null) {
            stmt.bindString(11, REGION_NAME3);
        }
 
        String LOUDONG = entity.getLOUDONG();
        if (LOUDONG != null) {
            stmt.bindString(12, LOUDONG);
        }
 
        String DOOR_DESC = entity.getDOOR_DESC();
        if (DOOR_DESC != null) {
            stmt.bindString(13, DOOR_DESC);
        }
 
        String CONTRACT_TYPE = entity.getCONTRACT_TYPE();
        if (CONTRACT_TYPE != null) {
            stmt.bindString(14, CONTRACT_TYPE);
        }
 
        String ORGANIZE_NAME = entity.getORGANIZE_NAME();
        if (ORGANIZE_NAME != null) {
            stmt.bindString(15, ORGANIZE_NAME);
        }
 
        String STAFF_NAME = entity.getSTAFF_NAME();
        if (STAFF_NAME != null) {
            stmt.bindString(16, STAFF_NAME);
        }
 
        String CUST_CODE = entity.getCUST_CODE();
        if (CUST_CODE != null) {
            stmt.bindString(17, CUST_CODE);
        }
 
        String CONT_NAME = entity.getCONT_NAME();
        if (CONT_NAME != null) {
            stmt.bindString(18, CONT_NAME);
        }
 
        String OWN_CORP_ORG = entity.getOWN_CORP_ORG();
        if (OWN_CORP_ORG != null) {
            stmt.bindString(19, OWN_CORP_ORG);
        }
 
        String CONT_PHONE1 = entity.getCONT_PHONE1();
        if (CONT_PHONE1 != null) {
            stmt.bindString(20, CONT_PHONE1);
        }
 
        String CONT_PHONE2 = entity.getCONT_PHONE2();
        if (CONT_PHONE2 != null) {
            stmt.bindString(21, CONT_PHONE2);
        }
 
        String CUST_CERT_NO = entity.getCUST_CERT_NO();
        if (CUST_CERT_NO != null) {
            stmt.bindString(22, CUST_CERT_NO);
        }
 
        String CONT_MOBILE1 = entity.getCONT_MOBILE1();
        if (CONT_MOBILE1 != null) {
            stmt.bindString(23, CONT_MOBILE1);
        }
 
        String CONT_MOBILE2 = entity.getCONT_MOBILE2();
        if (CONT_MOBILE2 != null) {
            stmt.bindString(24, CONT_MOBILE2);
        }
 
        String REMARK = entity.getREMARK();
        if (REMARK != null) {
            stmt.bindString(25, REMARK);
        }
 
        String ACCT_ID = entity.getACCT_ID();
        if (ACCT_ID != null) {
            stmt.bindString(26, ACCT_ID);
        }
 
        String PAYMENT_METHOD = entity.getPAYMENT_METHOD();
        if (PAYMENT_METHOD != null) {
            stmt.bindString(27, PAYMENT_METHOD);
        }
 
        String C = entity.getC();
        if (C != null) {
            stmt.bindString(28, C);
        }
 
        String STD_ADDR_NAME = entity.getSTD_ADDR_NAME();
        if (STD_ADDR_NAME != null) {
            stmt.bindString(29, STD_ADDR_NAME);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntityCustomer readEntity(Cursor cursor, int offset) {
        EntityCustomer entity = new EntityCustomer( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // CUST_ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // CUST_NAME
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CREATE_DATE
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CUST_PROP
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CUST_CERT_TYPE
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // CUST_STATUS
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CUST_TYPE
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // CUST_LEVEL
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // REGION_NAME1
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // REGION_NAME2
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // REGION_NAME3
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // LOUDONG
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // DOOR_DESC
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // CONTRACT_TYPE
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // ORGANIZE_NAME
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // STAFF_NAME
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // CUST_CODE
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // CONT_NAME
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // OWN_CORP_ORG
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // CONT_PHONE1
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // CONT_PHONE2
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // CUST_CERT_NO
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // CONT_MOBILE1
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // CONT_MOBILE2
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // REMARK
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // ACCT_ID
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // PAYMENT_METHOD
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // C
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28) // STD_ADDR_NAME
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityCustomer entity, int offset) {
        entity.setCUST_ID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCUST_NAME(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCREATE_DATE(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCUST_PROP(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCUST_CERT_TYPE(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCUST_STATUS(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCUST_TYPE(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCUST_LEVEL(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setREGION_NAME1(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setREGION_NAME2(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setREGION_NAME3(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLOUDONG(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDOOR_DESC(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCONTRACT_TYPE(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setORGANIZE_NAME(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSTAFF_NAME(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCUST_CODE(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCONT_NAME(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setOWN_CORP_ORG(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCONT_PHONE1(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setCONT_PHONE2(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setCUST_CERT_NO(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setCONT_MOBILE1(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setCONT_MOBILE2(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setREMARK(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setACCT_ID(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setPAYMENT_METHOD(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setC(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setSTD_ADDR_NAME(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntityCustomer entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntityCustomer entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
