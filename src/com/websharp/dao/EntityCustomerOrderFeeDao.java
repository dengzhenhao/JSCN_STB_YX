package com.websharp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.websharp.dao.EntityCustomerOrderFee;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_CUSTOMER_ORDER_FEE.
*/
public class EntityCustomerOrderFeeDao extends AbstractDao<EntityCustomerOrderFee, Void> {

    public static final String TABLENAME = "ENTITY_CUSTOMER_ORDER_FEE";

    /**
     * Properties of entity EntityCustomerOrderFee.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PROD_ORDER_ID = new Property(0, String.class, "PROD_ORDER_ID", false, "PROD__ORDER__ID");
        public final static Property PRICE_PLAN_NAME = new Property(1, String.class, "PRICE_PLAN_NAME", false, "PRICE__PLAN__NAME");
        public final static Property SHOULD_MONEY = new Property(2, String.class, "SHOULD_MONEY", false, "SHOULD__MONEY");
        public final static Property CUT_MONEY = new Property(3, String.class, "CUT_MONEY", false, "CUT__MONEY");
        public final static Property FACT_MONEY = new Property(4, String.class, "FACT_MONEY", false, "FACT__MONEY");
    };


    public EntityCustomerOrderFeeDao(DaoConfig config) {
        super(config);
    }
    
    public EntityCustomerOrderFeeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_CUSTOMER_ORDER_FEE' (" + //
                "'PROD__ORDER__ID' TEXT," + // 0: PROD_ORDER_ID
                "'PRICE__PLAN__NAME' TEXT," + // 1: PRICE_PLAN_NAME
                "'SHOULD__MONEY' TEXT," + // 2: SHOULD_MONEY
                "'CUT__MONEY' TEXT," + // 3: CUT_MONEY
                "'FACT__MONEY' TEXT);"); // 4: FACT_MONEY
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_CUSTOMER_ORDER_FEE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityCustomerOrderFee entity) {
        stmt.clearBindings();
 
        String PROD_ORDER_ID = entity.getPROD_ORDER_ID();
        if (PROD_ORDER_ID != null) {
            stmt.bindString(1, PROD_ORDER_ID);
        }
 
        String PRICE_PLAN_NAME = entity.getPRICE_PLAN_NAME();
        if (PRICE_PLAN_NAME != null) {
            stmt.bindString(2, PRICE_PLAN_NAME);
        }
 
        String SHOULD_MONEY = entity.getSHOULD_MONEY();
        if (SHOULD_MONEY != null) {
            stmt.bindString(3, SHOULD_MONEY);
        }
 
        String CUT_MONEY = entity.getCUT_MONEY();
        if (CUT_MONEY != null) {
            stmt.bindString(4, CUT_MONEY);
        }
 
        String FACT_MONEY = entity.getFACT_MONEY();
        if (FACT_MONEY != null) {
            stmt.bindString(5, FACT_MONEY);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntityCustomerOrderFee readEntity(Cursor cursor, int offset) {
        EntityCustomerOrderFee entity = new EntityCustomerOrderFee( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // PROD_ORDER_ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // PRICE_PLAN_NAME
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // SHOULD_MONEY
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CUT_MONEY
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // FACT_MONEY
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityCustomerOrderFee entity, int offset) {
        entity.setPROD_ORDER_ID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPRICE_PLAN_NAME(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSHOULD_MONEY(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCUT_MONEY(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFACT_MONEY(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntityCustomerOrderFee entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntityCustomerOrderFee entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
