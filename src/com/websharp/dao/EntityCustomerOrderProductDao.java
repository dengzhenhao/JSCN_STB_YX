package com.websharp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.websharp.dao.EntityCustomerOrderProduct;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_CUSTOMER_ORDER_PRODUCT.
*/
public class EntityCustomerOrderProductDao extends AbstractDao<EntityCustomerOrderProduct, Void> {

    public static final String TABLENAME = "ENTITY_CUSTOMER_ORDER_PRODUCT";

    /**
     * Properties of entity EntityCustomerOrderProduct.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PROD_ORDER_ID = new Property(0, String.class, "PROD_ORDER_ID", false, "PROD__ORDER__ID");
        public final static Property OFFER_ID = new Property(1, String.class, "OFFER_ID", false, "OFFER__ID");
        public final static Property OFFER_NAME = new Property(2, String.class, "OFFER_NAME", false, "OFFER__NAME");
        public final static Property SRVPKG_ID = new Property(3, String.class, "SRVPKG_ID", false, "SRVPKG__ID");
        public final static Property SRVPKG_NAME = new Property(4, String.class, "SRVPKG_NAME", false, "SRVPKG__NAME");
        public final static Property STATE = new Property(5, String.class, "STATE", false, "STATE");
        public final static Property VALID_DATE = new Property(6, String.class, "VALID_DATE", false, "VALID__DATE");
        public final static Property EXPIRE_DATE = new Property(7, String.class, "EXPIRE_DATE", false, "EXPIRE__DATE");
    };


    public EntityCustomerOrderProductDao(DaoConfig config) {
        super(config);
    }
    
    public EntityCustomerOrderProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_CUSTOMER_ORDER_PRODUCT' (" + //
                "'PROD__ORDER__ID' TEXT," + // 0: PROD_ORDER_ID
                "'OFFER__ID' TEXT," + // 1: OFFER_ID
                "'OFFER__NAME' TEXT," + // 2: OFFER_NAME
                "'SRVPKG__ID' TEXT," + // 3: SRVPKG_ID
                "'SRVPKG__NAME' TEXT," + // 4: SRVPKG_NAME
                "'STATE' TEXT," + // 5: STATE
                "'VALID__DATE' TEXT," + // 6: VALID_DATE
                "'EXPIRE__DATE' TEXT);"); // 7: EXPIRE_DATE
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_CUSTOMER_ORDER_PRODUCT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityCustomerOrderProduct entity) {
        stmt.clearBindings();
 
        String PROD_ORDER_ID = entity.getPROD_ORDER_ID();
        if (PROD_ORDER_ID != null) {
            stmt.bindString(1, PROD_ORDER_ID);
        }
 
        String OFFER_ID = entity.getOFFER_ID();
        if (OFFER_ID != null) {
            stmt.bindString(2, OFFER_ID);
        }
 
        String OFFER_NAME = entity.getOFFER_NAME();
        if (OFFER_NAME != null) {
            stmt.bindString(3, OFFER_NAME);
        }
 
        String SRVPKG_ID = entity.getSRVPKG_ID();
        if (SRVPKG_ID != null) {
            stmt.bindString(4, SRVPKG_ID);
        }
 
        String SRVPKG_NAME = entity.getSRVPKG_NAME();
        if (SRVPKG_NAME != null) {
            stmt.bindString(5, SRVPKG_NAME);
        }
 
        String STATE = entity.getSTATE();
        if (STATE != null) {
            stmt.bindString(6, STATE);
        }
 
        String VALID_DATE = entity.getVALID_DATE();
        if (VALID_DATE != null) {
            stmt.bindString(7, VALID_DATE);
        }
 
        String EXPIRE_DATE = entity.getEXPIRE_DATE();
        if (EXPIRE_DATE != null) {
            stmt.bindString(8, EXPIRE_DATE);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntityCustomerOrderProduct readEntity(Cursor cursor, int offset) {
        EntityCustomerOrderProduct entity = new EntityCustomerOrderProduct( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // PROD_ORDER_ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // OFFER_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // OFFER_NAME
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // SRVPKG_ID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // SRVPKG_NAME
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // STATE
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // VALID_DATE
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // EXPIRE_DATE
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityCustomerOrderProduct entity, int offset) {
        entity.setPROD_ORDER_ID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setOFFER_ID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOFFER_NAME(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSRVPKG_ID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSRVPKG_NAME(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSTATE(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVALID_DATE(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEXPIRE_DATE(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntityCustomerOrderProduct entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntityCustomerOrderProduct entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
