package com.websharp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.websharp.dao.EntityCustomerPackage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_CUSTOMER_PACKAGE.
*/
public class EntityCustomerPackageDao extends AbstractDao<EntityCustomerPackage, Void> {

    public static final String TABLENAME = "ENTITY_CUSTOMER_PACKAGE";

    /**
     * Properties of entity EntityCustomerPackage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property OFFER_ID = new Property(0, String.class, "OFFER_ID", false, "OFFER__ID");
        public final static Property OFFER_NAME = new Property(1, String.class, "OFFER_NAME", false, "OFFER__NAME");
        public final static Property SRVPKG_ID = new Property(2, String.class, "SRVPKG_ID", false, "SRVPKG__ID");
        public final static Property SRVPKG_NAME = new Property(3, String.class, "SRVPKG_NAME", false, "SRVPKG__NAME");
        public final static Property OS_STATUS = new Property(4, String.class, "OS_STATUS", false, "OS__STATUS");
        public final static Property VALID_DATE = new Property(5, String.class, "VALID_DATE", false, "VALID__DATE");
        public final static Property EXPIRE_DATE = new Property(6, String.class, "EXPIRE_DATE", false, "EXPIRE__DATE");
        public final static Property DONE_DATE = new Property(7, String.class, "DONE_DATE", false, "DONE__DATE");
        public final static Property ORGANIZE_NAME = new Property(8, String.class, "ORGANIZE_NAME", false, "ORGANIZE__NAME");
        public final static Property STAFF_NAME = new Property(9, String.class, "STAFF_NAME", false, "STAFF__NAME");
        public final static Property END_DATE = new Property(10, String.class, "END_DATE", false, "END__DATE");
    };


    public EntityCustomerPackageDao(DaoConfig config) {
        super(config);
    }
    
    public EntityCustomerPackageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_CUSTOMER_PACKAGE' (" + //
                "'OFFER__ID' TEXT," + // 0: OFFER_ID
                "'OFFER__NAME' TEXT," + // 1: OFFER_NAME
                "'SRVPKG__ID' TEXT," + // 2: SRVPKG_ID
                "'SRVPKG__NAME' TEXT," + // 3: SRVPKG_NAME
                "'OS__STATUS' TEXT," + // 4: OS_STATUS
                "'VALID__DATE' TEXT," + // 5: VALID_DATE
                "'EXPIRE__DATE' TEXT," + // 6: EXPIRE_DATE
                "'DONE__DATE' TEXT," + // 7: DONE_DATE
                "'ORGANIZE__NAME' TEXT," + // 8: ORGANIZE_NAME
                "'STAFF__NAME' TEXT," + // 9: STAFF_NAME
                "'END__DATE' TEXT);"); // 10: END_DATE
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_CUSTOMER_PACKAGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityCustomerPackage entity) {
        stmt.clearBindings();
 
        String OFFER_ID = entity.getOFFER_ID();
        if (OFFER_ID != null) {
            stmt.bindString(1, OFFER_ID);
        }
 
        String OFFER_NAME = entity.getOFFER_NAME();
        if (OFFER_NAME != null) {
            stmt.bindString(2, OFFER_NAME);
        }
 
        String SRVPKG_ID = entity.getSRVPKG_ID();
        if (SRVPKG_ID != null) {
            stmt.bindString(3, SRVPKG_ID);
        }
 
        String SRVPKG_NAME = entity.getSRVPKG_NAME();
        if (SRVPKG_NAME != null) {
            stmt.bindString(4, SRVPKG_NAME);
        }
 
        String OS_STATUS = entity.getOS_STATUS();
        if (OS_STATUS != null) {
            stmt.bindString(5, OS_STATUS);
        }
 
        String VALID_DATE = entity.getVALID_DATE();
        if (VALID_DATE != null) {
            stmt.bindString(6, VALID_DATE);
        }
 
        String EXPIRE_DATE = entity.getEXPIRE_DATE();
        if (EXPIRE_DATE != null) {
            stmt.bindString(7, EXPIRE_DATE);
        }
 
        String DONE_DATE = entity.getDONE_DATE();
        if (DONE_DATE != null) {
            stmt.bindString(8, DONE_DATE);
        }
 
        String ORGANIZE_NAME = entity.getORGANIZE_NAME();
        if (ORGANIZE_NAME != null) {
            stmt.bindString(9, ORGANIZE_NAME);
        }
 
        String STAFF_NAME = entity.getSTAFF_NAME();
        if (STAFF_NAME != null) {
            stmt.bindString(10, STAFF_NAME);
        }
 
        String END_DATE = entity.getEND_DATE();
        if (END_DATE != null) {
            stmt.bindString(11, END_DATE);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntityCustomerPackage readEntity(Cursor cursor, int offset) {
        EntityCustomerPackage entity = new EntityCustomerPackage( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // OFFER_ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // OFFER_NAME
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // SRVPKG_ID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // SRVPKG_NAME
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // OS_STATUS
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // VALID_DATE
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // EXPIRE_DATE
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // DONE_DATE
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ORGANIZE_NAME
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // STAFF_NAME
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // END_DATE
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityCustomerPackage entity, int offset) {
        entity.setOFFER_ID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setOFFER_NAME(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSRVPKG_ID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSRVPKG_NAME(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOS_STATUS(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVALID_DATE(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEXPIRE_DATE(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDONE_DATE(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setORGANIZE_NAME(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSTAFF_NAME(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEND_DATE(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntityCustomerPackage entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntityCustomerPackage entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
