package com.websharp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.websharp.dao.EntityCustomerResource;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_CUSTOMER_RESOURCE.
*/
public class EntityCustomerResourceDao extends AbstractDao<EntityCustomerResource, Void> {

    public static final String TABLENAME = "ENTITY_CUSTOMER_RESOURCE";

    /**
     * Properties of entity EntityCustomerResource.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property RES_CODE = new Property(0, String.class, "RES_CODE", false, "RES__CODE");
        public final static Property RES_NAME = new Property(1, String.class, "RES_NAME", false, "RES__NAME");
        public final static Property RES_EQU_NO = new Property(2, String.class, "RES_EQU_NO", false, "RES__EQU__NO");
        public final static Property VALID_DATE = new Property(3, String.class, "VALID_DATE", false, "VALID__DATE");
        public final static Property RES_USE_MODE = new Property(4, String.class, "RES_USE_MODE", false, "RES__USE__MODE");
    };


    public EntityCustomerResourceDao(DaoConfig config) {
        super(config);
    }
    
    public EntityCustomerResourceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_CUSTOMER_RESOURCE' (" + //
                "'RES__CODE' TEXT," + // 0: RES_CODE
                "'RES__NAME' TEXT," + // 1: RES_NAME
                "'RES__EQU__NO' TEXT," + // 2: RES_EQU_NO
                "'VALID__DATE' TEXT," + // 3: VALID_DATE
                "'RES__USE__MODE' TEXT);"); // 4: RES_USE_MODE
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_CUSTOMER_RESOURCE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityCustomerResource entity) {
        stmt.clearBindings();
 
        String RES_CODE = entity.getRES_CODE();
        if (RES_CODE != null) {
            stmt.bindString(1, RES_CODE);
        }
 
        String RES_NAME = entity.getRES_NAME();
        if (RES_NAME != null) {
            stmt.bindString(2, RES_NAME);
        }
 
        String RES_EQU_NO = entity.getRES_EQU_NO();
        if (RES_EQU_NO != null) {
            stmt.bindString(3, RES_EQU_NO);
        }
 
        String VALID_DATE = entity.getVALID_DATE();
        if (VALID_DATE != null) {
            stmt.bindString(4, VALID_DATE);
        }
 
        String RES_USE_MODE = entity.getRES_USE_MODE();
        if (RES_USE_MODE != null) {
            stmt.bindString(5, RES_USE_MODE);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntityCustomerResource readEntity(Cursor cursor, int offset) {
        EntityCustomerResource entity = new EntityCustomerResource( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // RES_CODE
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // RES_NAME
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // RES_EQU_NO
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // VALID_DATE
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // RES_USE_MODE
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityCustomerResource entity, int offset) {
        entity.setRES_CODE(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRES_NAME(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRES_EQU_NO(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVALID_DATE(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRES_USE_MODE(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntityCustomerResource entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntityCustomerResource entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
