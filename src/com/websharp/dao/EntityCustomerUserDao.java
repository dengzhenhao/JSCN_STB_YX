package com.websharp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.websharp.dao.EntityCustomerUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_CUSTOMER_USER.
*/
public class EntityCustomerUserDao extends AbstractDao<EntityCustomerUser, Void> {

    public static final String TABLENAME = "ENTITY_CUSTOMER_USER";

    /**
     * Properties of entity EntityCustomerUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PROD_INST_ID = new Property(0, String.class, "PROD_INST_ID", false, "PROD__INST__ID");
        public final static Property CUST_ID = new Property(1, String.class, "CUST_ID", false, "CUST__ID");
        public final static Property USER_NAME = new Property(2, String.class, "USER_NAME", false, "USER__NAME");
        public final static Property SUBSCRIBER_TYPE = new Property(3, String.class, "SUBSCRIBER_TYPE", false, "SUBSCRIBER__TYPE");
        public final static Property PLAN_NAME = new Property(4, String.class, "PLAN_NAME", false, "PLAN__NAME");
        public final static Property TV_NUMBER = new Property(5, String.class, "TV_NUMBER", false, "TV__NUMBER");
        public final static Property BILL_ID = new Property(6, String.class, "BILL_ID", false, "BILL__ID");
        public final static Property SUB_BILL_ID = new Property(7, String.class, "SUB_BILL_ID", false, "SUB__BILL__ID");
        public final static Property CREATE_ORG_ID = new Property(8, String.class, "CREATE_ORG_ID", false, "CREATE__ORG__ID");
        public final static Property CREATE_OP_ID = new Property(9, String.class, "CREATE_OP_ID", false, "CREATE__OP__ID");
        public final static Property CREATE_DATE = new Property(10, String.class, "CREATE_DATE", false, "CREATE__DATE");
        public final static Property OWN_CORP_ORG_ID = new Property(11, String.class, "OWN_CORP_ORG_ID", false, "OWN__CORP__ORG__ID");
        public final static Property CUST_ORDER_ID = new Property(12, String.class, "CUST_ORDER_ID", false, "CUST__ORDER__ID");
        public final static Property OS_STATUS = new Property(13, String.class, "OS_STATUS", false, "OS__STATUS");
        public final static Property PASSWORD = new Property(14, String.class, "PASSWORD", false, "PASSWORD");
        public final static Property LOGIN_NAME = new Property(15, String.class, "LOGIN_NAME", false, "LOGIN__NAME");
    };


    public EntityCustomerUserDao(DaoConfig config) {
        super(config);
    }
    
    public EntityCustomerUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_CUSTOMER_USER' (" + //
                "'PROD__INST__ID' TEXT," + // 0: PROD_INST_ID
                "'CUST__ID' TEXT," + // 1: CUST_ID
                "'USER__NAME' TEXT," + // 2: USER_NAME
                "'SUBSCRIBER__TYPE' TEXT," + // 3: SUBSCRIBER_TYPE
                "'PLAN__NAME' TEXT," + // 4: PLAN_NAME
                "'TV__NUMBER' TEXT," + // 5: TV_NUMBER
                "'BILL__ID' TEXT," + // 6: BILL_ID
                "'SUB__BILL__ID' TEXT," + // 7: SUB_BILL_ID
                "'CREATE__ORG__ID' TEXT," + // 8: CREATE_ORG_ID
                "'CREATE__OP__ID' TEXT," + // 9: CREATE_OP_ID
                "'CREATE__DATE' TEXT," + // 10: CREATE_DATE
                "'OWN__CORP__ORG__ID' TEXT," + // 11: OWN_CORP_ORG_ID
                "'CUST__ORDER__ID' TEXT," + // 12: CUST_ORDER_ID
                "'OS__STATUS' TEXT," + // 13: OS_STATUS
                "'PASSWORD' TEXT," + // 14: PASSWORD
                "'LOGIN__NAME' TEXT);"); // 15: LOGIN_NAME
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_CUSTOMER_USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityCustomerUser entity) {
        stmt.clearBindings();
 
        String PROD_INST_ID = entity.getPROD_INST_ID();
        if (PROD_INST_ID != null) {
            stmt.bindString(1, PROD_INST_ID);
        }
 
        String CUST_ID = entity.getCUST_ID();
        if (CUST_ID != null) {
            stmt.bindString(2, CUST_ID);
        }
 
        String USER_NAME = entity.getUSER_NAME();
        if (USER_NAME != null) {
            stmt.bindString(3, USER_NAME);
        }
 
        String SUBSCRIBER_TYPE = entity.getSUBSCRIBER_TYPE();
        if (SUBSCRIBER_TYPE != null) {
            stmt.bindString(4, SUBSCRIBER_TYPE);
        }
 
        String PLAN_NAME = entity.getPLAN_NAME();
        if (PLAN_NAME != null) {
            stmt.bindString(5, PLAN_NAME);
        }
 
        String TV_NUMBER = entity.getTV_NUMBER();
        if (TV_NUMBER != null) {
            stmt.bindString(6, TV_NUMBER);
        }
 
        String BILL_ID = entity.getBILL_ID();
        if (BILL_ID != null) {
            stmt.bindString(7, BILL_ID);
        }
 
        String SUB_BILL_ID = entity.getSUB_BILL_ID();
        if (SUB_BILL_ID != null) {
            stmt.bindString(8, SUB_BILL_ID);
        }
 
        String CREATE_ORG_ID = entity.getCREATE_ORG_ID();
        if (CREATE_ORG_ID != null) {
            stmt.bindString(9, CREATE_ORG_ID);
        }
 
        String CREATE_OP_ID = entity.getCREATE_OP_ID();
        if (CREATE_OP_ID != null) {
            stmt.bindString(10, CREATE_OP_ID);
        }
 
        String CREATE_DATE = entity.getCREATE_DATE();
        if (CREATE_DATE != null) {
            stmt.bindString(11, CREATE_DATE);
        }
 
        String OWN_CORP_ORG_ID = entity.getOWN_CORP_ORG_ID();
        if (OWN_CORP_ORG_ID != null) {
            stmt.bindString(12, OWN_CORP_ORG_ID);
        }
 
        String CUST_ORDER_ID = entity.getCUST_ORDER_ID();
        if (CUST_ORDER_ID != null) {
            stmt.bindString(13, CUST_ORDER_ID);
        }
 
        String OS_STATUS = entity.getOS_STATUS();
        if (OS_STATUS != null) {
            stmt.bindString(14, OS_STATUS);
        }
 
        String PASSWORD = entity.getPASSWORD();
        if (PASSWORD != null) {
            stmt.bindString(15, PASSWORD);
        }
 
        String LOGIN_NAME = entity.getLOGIN_NAME();
        if (LOGIN_NAME != null) {
            stmt.bindString(16, LOGIN_NAME);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntityCustomerUser readEntity(Cursor cursor, int offset) {
        EntityCustomerUser entity = new EntityCustomerUser( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // PROD_INST_ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // CUST_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // USER_NAME
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // SUBSCRIBER_TYPE
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // PLAN_NAME
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // TV_NUMBER
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // BILL_ID
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // SUB_BILL_ID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // CREATE_ORG_ID
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // CREATE_OP_ID
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // CREATE_DATE
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // OWN_CORP_ORG_ID
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // CUST_ORDER_ID
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // OS_STATUS
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // PASSWORD
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // LOGIN_NAME
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityCustomerUser entity, int offset) {
        entity.setPROD_INST_ID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCUST_ID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUSER_NAME(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSUBSCRIBER_TYPE(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPLAN_NAME(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTV_NUMBER(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBILL_ID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSUB_BILL_ID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCREATE_ORG_ID(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCREATE_OP_ID(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCREATE_DATE(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOWN_CORP_ORG_ID(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCUST_ORDER_ID(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setOS_STATUS(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPASSWORD(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setLOGIN_NAME(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntityCustomerUser entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntityCustomerUser entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
