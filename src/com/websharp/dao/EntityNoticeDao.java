package com.websharp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.websharp.dao.EntityNotice;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_NOTICE.
*/
public class EntityNoticeDao extends AbstractDao<EntityNotice, Void> {

    public static final String TABLENAME = "ENTITY_NOTICE";

    /**
     * Properties of entity EntityNotice.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property REL_ID = new Property(0, String.class, "REL_ID", false, "REL__ID");
        public final static Property CORP_ORG_ID = new Property(1, String.class, "CORP_ORG_ID", false, "CORP__ORG__ID");
        public final static Property AFFICHE_ID = new Property(2, String.class, "AFFICHE_ID", false, "AFFICHE__ID");
        public final static Property AFFICHE_ID1 = new Property(3, String.class, "AFFICHE_ID1", false, "AFFICHE__ID1");
        public final static Property AFFICHE_TITLE = new Property(4, String.class, "AFFICHE_TITLE", false, "AFFICHE__TITLE");
        public final static Property AFFICHE_CONTENT = new Property(5, String.class, "AFFICHE_CONTENT", false, "AFFICHE__CONTENT");
        public final static Property OP_ID = new Property(6, String.class, "OP_ID", false, "OP__ID");
        public final static Property PUBLISHER_OP_ID = new Property(7, String.class, "PUBLISHER_OP_ID", false, "PUBLISHER__OP__ID");
        public final static Property AFFICHE_LEVEL = new Property(8, String.class, "AFFICHE_LEVEL", false, "AFFICHE__LEVEL");
        public final static Property AFFICHE_CLASS = new Property(9, String.class, "AFFICHE_CLASS", false, "AFFICHE__CLASS");
        public final static Property AFFICHE_STATE = new Property(10, String.class, "AFFICHE_STATE", false, "AFFICHE__STATE");
        public final static Property VALID_DATE = new Property(11, String.class, "VALID_DATE", false, "VALID__DATE");
        public final static Property EXPIRE_DATE = new Property(12, String.class, "EXPIRE_DATE", false, "EXPIRE__DATE");
        public final static Property PUBLISH_DATE = new Property(13, String.class, "PUBLISH_DATE", false, "PUBLISH__DATE");
    };


    public EntityNoticeDao(DaoConfig config) {
        super(config);
    }
    
    public EntityNoticeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_NOTICE' (" + //
                "'REL__ID' TEXT," + // 0: REL_ID
                "'CORP__ORG__ID' TEXT," + // 1: CORP_ORG_ID
                "'AFFICHE__ID' TEXT," + // 2: AFFICHE_ID
                "'AFFICHE__ID1' TEXT," + // 3: AFFICHE_ID1
                "'AFFICHE__TITLE' TEXT," + // 4: AFFICHE_TITLE
                "'AFFICHE__CONTENT' TEXT," + // 5: AFFICHE_CONTENT
                "'OP__ID' TEXT," + // 6: OP_ID
                "'PUBLISHER__OP__ID' TEXT," + // 7: PUBLISHER_OP_ID
                "'AFFICHE__LEVEL' TEXT," + // 8: AFFICHE_LEVEL
                "'AFFICHE__CLASS' TEXT," + // 9: AFFICHE_CLASS
                "'AFFICHE__STATE' TEXT," + // 10: AFFICHE_STATE
                "'VALID__DATE' TEXT," + // 11: VALID_DATE
                "'EXPIRE__DATE' TEXT," + // 12: EXPIRE_DATE
                "'PUBLISH__DATE' TEXT);"); // 13: PUBLISH_DATE
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_NOTICE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityNotice entity) {
        stmt.clearBindings();
 
        String REL_ID = entity.getREL_ID();
        if (REL_ID != null) {
            stmt.bindString(1, REL_ID);
        }
 
        String CORP_ORG_ID = entity.getCORP_ORG_ID();
        if (CORP_ORG_ID != null) {
            stmt.bindString(2, CORP_ORG_ID);
        }
 
        String AFFICHE_ID = entity.getAFFICHE_ID();
        if (AFFICHE_ID != null) {
            stmt.bindString(3, AFFICHE_ID);
        }
 
        String AFFICHE_ID1 = entity.getAFFICHE_ID1();
        if (AFFICHE_ID1 != null) {
            stmt.bindString(4, AFFICHE_ID1);
        }
 
        String AFFICHE_TITLE = entity.getAFFICHE_TITLE();
        if (AFFICHE_TITLE != null) {
            stmt.bindString(5, AFFICHE_TITLE);
        }
 
        String AFFICHE_CONTENT = entity.getAFFICHE_CONTENT();
        if (AFFICHE_CONTENT != null) {
            stmt.bindString(6, AFFICHE_CONTENT);
        }
 
        String OP_ID = entity.getOP_ID();
        if (OP_ID != null) {
            stmt.bindString(7, OP_ID);
        }
 
        String PUBLISHER_OP_ID = entity.getPUBLISHER_OP_ID();
        if (PUBLISHER_OP_ID != null) {
            stmt.bindString(8, PUBLISHER_OP_ID);
        }
 
        String AFFICHE_LEVEL = entity.getAFFICHE_LEVEL();
        if (AFFICHE_LEVEL != null) {
            stmt.bindString(9, AFFICHE_LEVEL);
        }
 
        String AFFICHE_CLASS = entity.getAFFICHE_CLASS();
        if (AFFICHE_CLASS != null) {
            stmt.bindString(10, AFFICHE_CLASS);
        }
 
        String AFFICHE_STATE = entity.getAFFICHE_STATE();
        if (AFFICHE_STATE != null) {
            stmt.bindString(11, AFFICHE_STATE);
        }
 
        String VALID_DATE = entity.getVALID_DATE();
        if (VALID_DATE != null) {
            stmt.bindString(12, VALID_DATE);
        }
 
        String EXPIRE_DATE = entity.getEXPIRE_DATE();
        if (EXPIRE_DATE != null) {
            stmt.bindString(13, EXPIRE_DATE);
        }
 
        String PUBLISH_DATE = entity.getPUBLISH_DATE();
        if (PUBLISH_DATE != null) {
            stmt.bindString(14, PUBLISH_DATE);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntityNotice readEntity(Cursor cursor, int offset) {
        EntityNotice entity = new EntityNotice( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // REL_ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // CORP_ORG_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // AFFICHE_ID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // AFFICHE_ID1
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // AFFICHE_TITLE
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // AFFICHE_CONTENT
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // OP_ID
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // PUBLISHER_OP_ID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // AFFICHE_LEVEL
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // AFFICHE_CLASS
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // AFFICHE_STATE
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // VALID_DATE
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // EXPIRE_DATE
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // PUBLISH_DATE
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityNotice entity, int offset) {
        entity.setREL_ID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCORP_ORG_ID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAFFICHE_ID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAFFICHE_ID1(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAFFICHE_TITLE(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAFFICHE_CONTENT(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOP_ID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPUBLISHER_OP_ID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAFFICHE_LEVEL(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAFFICHE_CLASS(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAFFICHE_STATE(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setVALID_DATE(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setEXPIRE_DATE(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPUBLISH_DATE(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntityNotice entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntityNotice entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
