package com.websharp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.websharp.dao.EntityPayAmountRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_PAY_AMOUNT_RECORD.
*/
public class EntityPayAmountRecordDao extends AbstractDao<EntityPayAmountRecord, Void> {

    public static final String TABLENAME = "ENTITY_PAY_AMOUNT_RECORD";

    /**
     * Properties of entity EntityPayAmountRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property AMOUNT = new Property(0, String.class, "AMOUNT", false, "AMOUNT");
        public final static Property PAYMENT_DATE = new Property(1, String.class, "PAYMENT_DATE", false, "PAYMENT__DATE");
        public final static Property PAYMENT_METHOD = new Property(2, String.class, "PAYMENT_METHOD", false, "PAYMENT__METHOD");
        public final static Property OPERATION_TYPE = new Property(3, String.class, "OPERATION_TYPE", false, "OPERATION__TYPE");
        public final static Property ORGANIZE_NAME = new Property(4, String.class, "ORGANIZE_NAME", false, "ORGANIZE__NAME");
        public final static Property STAFF_NAME = new Property(5, String.class, "STAFF_NAME", false, "STAFF__NAME");
        public final static Property BANK_NAME = new Property(6, String.class, "BANK_NAME", false, "BANK__NAME");
        public final static Property INVOICE_NO = new Property(7, String.class, "INVOICE_NO", false, "INVOICE__NO");
        public final static Property PAYMENT_ID = new Property(8, String.class, "PAYMENT_ID", false, "PAYMENT__ID");
        public final static Property CERTIFIED_TYPE = new Property(9, String.class, "CERTIFIED_TYPE", false, "CERTIFIED__TYPE");
        public final static Property REMARK = new Property(10, String.class, "REMARK", false, "REMARK");
    };


    public EntityPayAmountRecordDao(DaoConfig config) {
        super(config);
    }
    
    public EntityPayAmountRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_PAY_AMOUNT_RECORD' (" + //
                "'AMOUNT' TEXT," + // 0: AMOUNT
                "'PAYMENT__DATE' TEXT," + // 1: PAYMENT_DATE
                "'PAYMENT__METHOD' TEXT," + // 2: PAYMENT_METHOD
                "'OPERATION__TYPE' TEXT," + // 3: OPERATION_TYPE
                "'ORGANIZE__NAME' TEXT," + // 4: ORGANIZE_NAME
                "'STAFF__NAME' TEXT," + // 5: STAFF_NAME
                "'BANK__NAME' TEXT," + // 6: BANK_NAME
                "'INVOICE__NO' TEXT," + // 7: INVOICE_NO
                "'PAYMENT__ID' TEXT," + // 8: PAYMENT_ID
                "'CERTIFIED__TYPE' TEXT," + // 9: CERTIFIED_TYPE
                "'REMARK' TEXT);"); // 10: REMARK
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_PAY_AMOUNT_RECORD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityPayAmountRecord entity) {
        stmt.clearBindings();
 
        String AMOUNT = entity.getAMOUNT();
        if (AMOUNT != null) {
            stmt.bindString(1, AMOUNT);
        }
 
        String PAYMENT_DATE = entity.getPAYMENT_DATE();
        if (PAYMENT_DATE != null) {
            stmt.bindString(2, PAYMENT_DATE);
        }
 
        String PAYMENT_METHOD = entity.getPAYMENT_METHOD();
        if (PAYMENT_METHOD != null) {
            stmt.bindString(3, PAYMENT_METHOD);
        }
 
        String OPERATION_TYPE = entity.getOPERATION_TYPE();
        if (OPERATION_TYPE != null) {
            stmt.bindString(4, OPERATION_TYPE);
        }
 
        String ORGANIZE_NAME = entity.getORGANIZE_NAME();
        if (ORGANIZE_NAME != null) {
            stmt.bindString(5, ORGANIZE_NAME);
        }
 
        String STAFF_NAME = entity.getSTAFF_NAME();
        if (STAFF_NAME != null) {
            stmt.bindString(6, STAFF_NAME);
        }
 
        String BANK_NAME = entity.getBANK_NAME();
        if (BANK_NAME != null) {
            stmt.bindString(7, BANK_NAME);
        }
 
        String INVOICE_NO = entity.getINVOICE_NO();
        if (INVOICE_NO != null) {
            stmt.bindString(8, INVOICE_NO);
        }
 
        String PAYMENT_ID = entity.getPAYMENT_ID();
        if (PAYMENT_ID != null) {
            stmt.bindString(9, PAYMENT_ID);
        }
 
        String CERTIFIED_TYPE = entity.getCERTIFIED_TYPE();
        if (CERTIFIED_TYPE != null) {
            stmt.bindString(10, CERTIFIED_TYPE);
        }
 
        String REMARK = entity.getREMARK();
        if (REMARK != null) {
            stmt.bindString(11, REMARK);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntityPayAmountRecord readEntity(Cursor cursor, int offset) {
        EntityPayAmountRecord entity = new EntityPayAmountRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // AMOUNT
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // PAYMENT_DATE
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // PAYMENT_METHOD
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // OPERATION_TYPE
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ORGANIZE_NAME
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // STAFF_NAME
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // BANK_NAME
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // INVOICE_NO
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // PAYMENT_ID
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // CERTIFIED_TYPE
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // REMARK
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityPayAmountRecord entity, int offset) {
        entity.setAMOUNT(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPAYMENT_DATE(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPAYMENT_METHOD(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOPERATION_TYPE(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setORGANIZE_NAME(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSTAFF_NAME(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBANK_NAME(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setINVOICE_NO(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPAYMENT_ID(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCERTIFIED_TYPE(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setREMARK(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntityPayAmountRecord entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntityPayAmountRecord entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
