package com.websharp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.websharp.dao.EntityPlayRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_PLAY_RECORD.
*/
public class EntityPlayRecordDao extends AbstractDao<EntityPlayRecord, Void> {

    public static final String TABLENAME = "ENTITY_PLAY_RECORD";

    /**
     * Properties of entity EntityPlayRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property USER_NUMBER = new Property(0, String.class, "USER_NUMBER", false, "USER__NUMBER");
        public final static Property START_TIME = new Property(1, String.class, "START_TIME", false, "START__TIME");
        public final static Property STD_BASIC_CHARGE = new Property(2, String.class, "STD_BASIC_CHARGE", false, "STD__BASIC__CHARGE");
        public final static Property CHARGE1 = new Property(3, String.class, "CHARGE1", false, "CHARGE1");
        public final static Property FILM_NAME = new Property(4, String.class, "FILM_NAME", false, "FILM__NAME");
    };


    public EntityPlayRecordDao(DaoConfig config) {
        super(config);
    }
    
    public EntityPlayRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_PLAY_RECORD' (" + //
                "'USER__NUMBER' TEXT," + // 0: USER_NUMBER
                "'START__TIME' TEXT," + // 1: START_TIME
                "'STD__BASIC__CHARGE' TEXT," + // 2: STD_BASIC_CHARGE
                "'CHARGE1' TEXT," + // 3: CHARGE1
                "'FILM__NAME' TEXT);"); // 4: FILM_NAME
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_PLAY_RECORD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityPlayRecord entity) {
        stmt.clearBindings();
 
        String USER_NUMBER = entity.getUSER_NUMBER();
        if (USER_NUMBER != null) {
            stmt.bindString(1, USER_NUMBER);
        }
 
        String START_TIME = entity.getSTART_TIME();
        if (START_TIME != null) {
            stmt.bindString(2, START_TIME);
        }
 
        String STD_BASIC_CHARGE = entity.getSTD_BASIC_CHARGE();
        if (STD_BASIC_CHARGE != null) {
            stmt.bindString(3, STD_BASIC_CHARGE);
        }
 
        String CHARGE1 = entity.getCHARGE1();
        if (CHARGE1 != null) {
            stmt.bindString(4, CHARGE1);
        }
 
        String FILM_NAME = entity.getFILM_NAME();
        if (FILM_NAME != null) {
            stmt.bindString(5, FILM_NAME);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntityPlayRecord readEntity(Cursor cursor, int offset) {
        EntityPlayRecord entity = new EntityPlayRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // USER_NUMBER
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // START_TIME
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // STD_BASIC_CHARGE
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CHARGE1
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // FILM_NAME
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityPlayRecord entity, int offset) {
        entity.setUSER_NUMBER(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSTART_TIME(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSTD_BASIC_CHARGE(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCHARGE1(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFILM_NAME(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntityPlayRecord entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntityPlayRecord entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
