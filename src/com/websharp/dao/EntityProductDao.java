package com.websharp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.websharp.dao.EntityProduct;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_PRODUCT.
*/
public class EntityProductDao extends AbstractDao<EntityProduct, Void> {

    public static final String TABLENAME = "ENTITY_PRODUCT";

    /**
     * Properties of entity EntityProduct.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ProdId = new Property(0, String.class, "ProdId", false, "PROD_ID");
        public final static Property ProdName = new Property(1, String.class, "ProdName", false, "PROD_NAME");
        public final static Property OfferId = new Property(2, String.class, "OfferId", false, "OFFER_ID");
        public final static Property Price = new Property(3, Double.class, "Price", false, "PRICE");
        public final static Property AllowEditPrice = new Property(4, String.class, "AllowEditPrice", false, "ALLOW_EDIT_PRICE");
    };


    public EntityProductDao(DaoConfig config) {
        super(config);
    }
    
    public EntityProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_PRODUCT' (" + //
                "'PROD_ID' TEXT," + // 0: ProdId
                "'PROD_NAME' TEXT," + // 1: ProdName
                "'OFFER_ID' TEXT," + // 2: OfferId
                "'PRICE' REAL," + // 3: Price
                "'ALLOW_EDIT_PRICE' TEXT);"); // 4: AllowEditPrice
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_PRODUCT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityProduct entity) {
        stmt.clearBindings();
 
        String ProdId = entity.getProdId();
        if (ProdId != null) {
            stmt.bindString(1, ProdId);
        }
 
        String ProdName = entity.getProdName();
        if (ProdName != null) {
            stmt.bindString(2, ProdName);
        }
 
        String OfferId = entity.getOfferId();
        if (OfferId != null) {
            stmt.bindString(3, OfferId);
        }
 
        Double Price = entity.getPrice();
        if (Price != null) {
            stmt.bindDouble(4, Price);
        }
 
        String AllowEditPrice = entity.getAllowEditPrice();
        if (AllowEditPrice != null) {
            stmt.bindString(5, AllowEditPrice);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntityProduct readEntity(Cursor cursor, int offset) {
        EntityProduct entity = new EntityProduct( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ProdId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ProdName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // OfferId
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // Price
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // AllowEditPrice
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityProduct entity, int offset) {
        entity.setProdId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setProdName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOfferId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPrice(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setAllowEditPrice(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntityProduct entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntityProduct entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
