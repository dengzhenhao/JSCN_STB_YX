package com.websharp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.websharp.dao.EntityStaticData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_STATIC_DATA.
*/
public class EntityStaticDataDao extends AbstractDao<EntityStaticData, Void> {

    public static final String TABLENAME = "ENTITY_STATIC_DATA";

    /**
     * Properties of entity EntityStaticData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CODE_TYPE = new Property(0, String.class, "CODE_TYPE", false, "CODE__TYPE");
        public final static Property CODE_VALUE = new Property(1, String.class, "CODE_VALUE", false, "CODE__VALUE");
        public final static Property CODE_NAME = new Property(2, String.class, "CODE_NAME", false, "CODE__NAME");
    };


    public EntityStaticDataDao(DaoConfig config) {
        super(config);
    }
    
    public EntityStaticDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_STATIC_DATA' (" + //
                "'CODE__TYPE' TEXT," + // 0: CODE_TYPE
                "'CODE__VALUE' TEXT," + // 1: CODE_VALUE
                "'CODE__NAME' TEXT);"); // 2: CODE_NAME
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_STATIC_DATA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityStaticData entity) {
        stmt.clearBindings();
 
        String CODE_TYPE = entity.getCODE_TYPE();
        if (CODE_TYPE != null) {
            stmt.bindString(1, CODE_TYPE);
        }
 
        String CODE_VALUE = entity.getCODE_VALUE();
        if (CODE_VALUE != null) {
            stmt.bindString(2, CODE_VALUE);
        }
 
        String CODE_NAME = entity.getCODE_NAME();
        if (CODE_NAME != null) {
            stmt.bindString(3, CODE_NAME);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntityStaticData readEntity(Cursor cursor, int offset) {
        EntityStaticData entity = new EntityStaticData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // CODE_TYPE
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // CODE_VALUE
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // CODE_NAME
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityStaticData entity, int offset) {
        entity.setCODE_TYPE(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCODE_VALUE(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCODE_NAME(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntityStaticData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntityStaticData entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
