package com.websharp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.websharp.dao.EntityUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_USER.
*/
public class EntityUserDao extends AbstractDao<EntityUser, Void> {

    public static final String TABLENAME = "ENTITY_USER";

    /**
     * Properties of entity EntityUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property OpId = new Property(0, String.class, "opId", false, "OP_ID");
        public final static Property LoginCode = new Property(1, String.class, "loginCode", false, "LOGIN_CODE");
        public final static Property LoginPwd = new Property(2, String.class, "loginPwd", false, "LOGIN_PWD");
        public final static Property Token = new Property(3, String.class, "token", false, "TOKEN");
        public final static Property StaffName = new Property(4, String.class, "staffName", false, "STAFF_NAME");
    };


    public EntityUserDao(DaoConfig config) {
        super(config);
    }
    
    public EntityUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_USER' (" + //
                "'OP_ID' TEXT," + // 0: opId
                "'LOGIN_CODE' TEXT," + // 1: loginCode
                "'LOGIN_PWD' TEXT," + // 2: loginPwd
                "'TOKEN' TEXT," + // 3: token
                "'STAFF_NAME' TEXT);"); // 4: staffName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityUser entity) {
        stmt.clearBindings();
 
        String opId = entity.getOpId();
        if (opId != null) {
            stmt.bindString(1, opId);
        }
 
        String loginCode = entity.getLoginCode();
        if (loginCode != null) {
            stmt.bindString(2, loginCode);
        }
 
        String loginPwd = entity.getLoginPwd();
        if (loginPwd != null) {
            stmt.bindString(3, loginPwd);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(4, token);
        }
 
        String staffName = entity.getStaffName();
        if (staffName != null) {
            stmt.bindString(5, staffName);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntityUser readEntity(Cursor cursor, int offset) {
        EntityUser entity = new EntityUser( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // opId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // loginCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // loginPwd
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // token
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // staffName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityUser entity, int offset) {
        entity.setOpId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLoginCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLoginPwd(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setToken(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStaffName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntityUser entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntityUser entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
