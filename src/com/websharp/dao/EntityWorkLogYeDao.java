package com.websharp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.websharp.dao.EntityWorkLogYe;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_WORK_LOG_YE.
*/
public class EntityWorkLogYeDao extends AbstractDao<EntityWorkLogYe, Void> {

    public static final String TABLENAME = "ENTITY_WORK_LOG_YE";

    /**
     * Properties of entity EntityWorkLogYe.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property OccurTime = new Property(0, String.class, "OccurTime", false, "OCCUR_TIME");
        public final static Property UserID = new Property(1, String.class, "UserID", false, "USER_ID");
        public final static Property UserName = new Property(2, String.class, "UserName", false, "USER_NAME");
        public final static Property OrgCode = new Property(3, String.class, "OrgCode", false, "ORG_CODE");
        public final static Property ParamType = new Property(4, String.class, "ParamType", false, "PARAM_TYPE");
        public final static Property ParamValue = new Property(5, String.class, "ParamValue", false, "PARAM_VALUE");
        public final static Property State = new Property(6, String.class, "State", false, "STATE");
        public final static Property ID = new Property(7, String.class, "ID", false, "ID");
    };


    public EntityWorkLogYeDao(DaoConfig config) {
        super(config);
    }
    
    public EntityWorkLogYeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_WORK_LOG_YE' (" + //
                "'OCCUR_TIME' TEXT," + // 0: OccurTime
                "'USER_ID' TEXT," + // 1: UserID
                "'USER_NAME' TEXT," + // 2: UserName
                "'ORG_CODE' TEXT," + // 3: OrgCode
                "'PARAM_TYPE' TEXT," + // 4: ParamType
                "'PARAM_VALUE' TEXT," + // 5: ParamValue
                "'STATE' TEXT," + // 6: State
                "'ID' TEXT);"); // 7: ID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_WORK_LOG_YE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityWorkLogYe entity) {
        stmt.clearBindings();
 
        String OccurTime = entity.getOccurTime();
        if (OccurTime != null) {
            stmt.bindString(1, OccurTime);
        }
 
        String UserID = entity.getUserID();
        if (UserID != null) {
            stmt.bindString(2, UserID);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(3, UserName);
        }
 
        String OrgCode = entity.getOrgCode();
        if (OrgCode != null) {
            stmt.bindString(4, OrgCode);
        }
 
        String ParamType = entity.getParamType();
        if (ParamType != null) {
            stmt.bindString(5, ParamType);
        }
 
        String ParamValue = entity.getParamValue();
        if (ParamValue != null) {
            stmt.bindString(6, ParamValue);
        }
 
        String State = entity.getState();
        if (State != null) {
            stmt.bindString(7, State);
        }
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(8, ID);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntityWorkLogYe readEntity(Cursor cursor, int offset) {
        EntityWorkLogYe entity = new EntityWorkLogYe( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // OccurTime
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // UserID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // UserName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // OrgCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ParamType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ParamValue
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // State
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // ID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityWorkLogYe entity, int offset) {
        entity.setOccurTime(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOrgCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setParamType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setParamValue(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setState(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntityWorkLogYe entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntityWorkLogYe entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
